name: Build Native Plugin

on: [push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
#        os: [windows-latest, ubuntu-latest, macos-latest]
        os: [ubuntu-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Act dependencies
        if: ${{ env.ACT }} && matrix.os == 'ubuntu-latest'
        run: |
          apt-get update && apt-get install sudo curl build-essential git -y

      - name: Set up Python and pip
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install python3 python3-pip -y

      - name: Set up Python and pip
        if: matrix.os == 'windows-latest'
        run: |
          choco install python --version=3.9
          refreshenv
          python -m ensurepip
          python -m pip install --upgrade pip

      - name: Set up Python and pip (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install python
          python3 -m venv venv
          source venv/bin/activate
          python3 -m pip install --upgrade pip

      - name: Set up CMake
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install cmake -y

      - name: Set up CMake
        if: matrix.os == 'windows-latest'
        run: choco install cmake

      - name: Set up CMake
        if: matrix.os == 'macos-latest'
        run: brew install cmake

      - name: Set up Conan
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            source venv/bin/activate
          fi

          # Install Conan in the virtual environment
          python3 -m pip install conan

          # Verify Conan installation
          conan --version

      - name: Set up Emscripten (for WebAssembly)
        if: matrix.os == 'ubuntu-latest'  # Only run on Linux for WebAssembly
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh

      - name: Build plugin
        run: |
          mkdir build
          cd build

          # Re-activate the virtual environment (macOS-specific)
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            source ../venv/bin/activate
          fi

          conan profile detect --force

          # Use the appropriate Conan profile for the platform
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            conan install .. --profile=../conan/linux.profile --build=missing
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            conan install .. --profile=../conan/windows.profile --build=missing
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # Detect architecture (x86_64 or arm64)
            ARCH=$(uname -m)
            if [[ "$ARCH" == "arm64" ]]; then
              echo "Detected Apple Silicon (arm64)"
              conan install .. --profile=../conan/macos.profile -s arch=armv8 --build=missing
            else
              echo "Detected Intel (x86_64)"
              conan install .. --profile=../conan/macos.profile -s arch=x86_64 --build=missing
            fi
          fi

          # Configure CMake with the Conan toolchain
          cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake

          # Build the project
          cmake --build .
          cpack .

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: ${{ !env.ACT }}
        with:
          name: my_plugin_${{ matrix.os }}
          path: build/**.zip

      - name: Save artifacts
        run: |
          mkdir -p artifacts
          cp -r build/ artifacts/
          ls -la artifacts